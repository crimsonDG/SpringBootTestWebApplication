version: '3.7'
services:

  db:
    image: 'postgres:latest'
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=user_db
    networks:
      - microservice-network

  discovery-server:
    image: 'discovery-server:latest'
    build:
      context: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    expose:
      - "8761"
    networks:
      - microservice-network
    depends_on:
      - config-server

  api-gateway:
    image: 'api-gateway:latest'
    build:
      context: ./api-gateway
    container_name: api-gateway
    hostname: localhost
    environment:
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/demo
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/realms/demo/protocol/openid-connect/certs
    ports:
      - "8181:8080"
    expose:
      - "8181"
    depends_on:
      - config-server
      - discovery-server
    networks:
      - microservice-network

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.2
    container_name: keycloak
    command: [ "start-dev", "--import-realm", ]
    environment:
      DB_URL: jdbc:postgresql://db:5432/user_db
      DB_USERNAME: postgres
      DB_PASSWORD: root
      DB_DATABASE: user_db
      DB_VENDOR: postgres
      DB_ADDR: db
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - db
    networks:
      - microservice-network

  admin-service:
    image: 'admin-service:latest'
    build:
      context: ./admin-service
    container_name: admin-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/user_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - SPRING_RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - config-server
      - db
      - discovery-server
      - api-gateway
      - rabbitmq
      - redis
    networks:
      - microservice-network

  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
    image: 'auth-service:latest'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/user_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - config-server
      - db
      - discovery-server
      - api-gateway
      - rabbitmq
      - redis
    networks:
      - microservice-network

  main-service:
    container_name: main-service
    build:
      context: ./main-service
    image: 'main-service:latest'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/user_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - config-server
      - db
      - discovery-server
      - api-gateway
      - rabbitmq
      - redis
    networks:
      - microservice-network

  spring-boot-admin:
    image: 'spring-boot-admin:latest'
    build:
      context: ./sba
    container_name: spring-boot-admin
    ports:
      - "8585:8585"
    expose:
      - "8585"
    depends_on:
      - config-server
      - discovery-server
      - api-gateway
    networks:
      - microservice-network

  config-server:
    image: 'config-server:latest'
    build:
      context: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    expose:
      - "8888"
    networks:
      - microservice-network

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservice-network

  redis:
    container_name: redis
    image: 'redis'
    ports:
      - "6379:6379"
    networks:
      - microservice-network

networks:
  microservice-network:
    driver: bridge