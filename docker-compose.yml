version: '3.7'
services:

  db:
    image: 'postgres:latest'
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    volumes:
      - ./database-migration/src/main/resources/db-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservice-network

  discovery-server:
    image: 'discovery-server:latest'
    build:
      context: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    expose:
      - "8761"
    networks:
      - microservice-network

  api-gateway:
    image: 'api-gateway:latest'
    build:
      context: ./api-gateway
    container_name: api-gateway
    hostname: localhost
    environment:
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/demo
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/demo/protocol/openid-connect/certs
    ports:
      - "8181:8080"
    expose:
      - "8181"
    depends_on:
      - discovery-server
    networks:
      - microservice-network

  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    container_name: keycloak
    command: [ "start-dev", "--import-realm"]
    environment:
      KC_DB_URL: jdbc:postgresql://db:5432/user_db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: root
      KC_DB: postgres
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - db
    networks:
      - microservice-network

  admin-service:
    image: 'admin-service:latest'
    build:
      context: ./admin-service
    container_name: admin-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/user_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KEYCLOAK_TOKEN_URL: http://localhost:8080/realms/demo/protocol/openid-connect/token
    depends_on:
      - db
      - discovery-server
      - api-gateway
      - rabbitmq
      - redis
    networks:
      - microservice-network

  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
    image: 'auth-service:latest'
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/user_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KEYCLOAK_TOKEN_URL: http://keycloak:8080/realms/demo/protocol/openid-connect/token
    depends_on:
      - db
      - discovery-server
      - api-gateway
      - rabbitmq
      - redis
    networks:
      - microservice-network

  main-service:
    container_name: main-service
    build:
      context: ./main-service
    image: 'main-service:latest'
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/user_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KEYCLOAK_TOKEN_URL: http://localhost:8080/realms/demo/protocol/openid-connect/token
    depends_on:
      - db
      - discovery-server
      - api-gateway
      - redis
    networks:
      - microservice-network

  music-service:
    image: 'music-service'
    build:
      context: ./music-service
    container_name: music-service
    environment:
      SPRING_DATASOURCE_URL_SONG: jdbc:postgresql://db:5432/song_db
      SPRING_DATASOURCE_URL_LABEL: jdbc:postgresql://db:5432/label_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KEYCLOAK_TOKEN_URL: http://localhost:8080/realms/demo/protocol/openid-connect/token
    depends_on:
      - db
      - discovery-server
      - api-gateway
      - redis
    networks:
      - microservice-network

  spring-boot-admin:
    image: 'spring-boot-admin:latest'
    build:
      context: ./sba
    container_name: spring-boot-admin
    ports:
      - "8585:8585"
    expose:
      - "8585"
    depends_on:
      - discovery-server
      - api-gateway
    networks:
      - microservice-network

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservice-network

  redis:
    container_name: redis
    image: 'redis'
    ports:
      - "6379:6379"
    networks:
      - microservice-network

networks:
  microservice-network:
    driver: bridge